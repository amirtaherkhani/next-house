services:
  coder:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    container_name: coder
    hostname: coder-server
    group_add:
      - "999"
      - "1000"
    networks:
      - traefik-network
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.coder.rule=Host(`coder.${HOST_NAME}`)
      - traefik.http.routers.coder.entrypoints=websecure
      - traefik.http.routers.coder.tls=true
      - traefik.http.routers.coder.tls.certresolver=letsencrypt
      - traefik.http.services.coder.loadbalancer.server.port=80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/docker/daemon.json:/etc/docker/daemon.json
      - coder-data:/var/lib/coder
    depends_on:
      database:
        condition: service_healthy
  database:
    image: postgres:latest
    container_name: coder-db
    hostname: coder-db-server
    expose:
      - 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-coder} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: ${POSTGRES_DB:-coder} # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - coder-db:/var/lib/postgresql/data # Use "docker volume rm coder_coder_data" to reset Coder
    networks:
      - traefik-network
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  coder-db:
    name: coder-db
  coder-data:
    name: coder-data
networks:
  traefik-network:
    external: true
